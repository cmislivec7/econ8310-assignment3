# -*- coding: utf-8 -*-
"""Assignment3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19t3eaUAyYcgwXocDfK7DqaUDtKJ0vgp7
"""

# For reading data
from torch.utils.data import DataLoader
# For visualizing
import plotly.express as px
# For model building
import torch
import torch.nn as nn
import torch.nn.functional as F
# Import helpers
import nnhelper as nnh


train_image_url = 'https://github.com/zalandoresearch/fashion-mnist/blob/master/data/fashion/train-images-idx3-ubyte.gz?raw=true'
train_label_url = 'https://github.com/zalandoresearch/fashion-mnist/blob/master/data/fashion/train-labels-idx1-ubyte.gz?raw=true'
test_image_url =  'https://github.com/zalandoresearch/fashion-mnist/blob/master/data/fashion/t10k-images-idx3-ubyte.gz?raw=true'
test_label_url =  'https://github.com/zalandoresearch/fashion-mnist/blob/master/data/fashion/t10k-labels-idx1-ubyte.gz?raw=true'


train_data = nnh.CustomMNIST(train_image_url, train_label_url)
test_data = nnh.CustomMNIST(test_image_url, test_label_url)

# Create data feed pipelines for modeling
train_dataloader = DataLoader(train_data, batch_size=64)
test_dataloader = DataLoader(test_data, batch_size=64)


class LeNet(nn.Module):
  def __init__(self):
    super(LeNet, self).__init__()
    # 6 output channels, 5x5 square convolution
    # kernel
    self.conv1 = nn.LazyConv2d(6, 5, padding=2)
    self.conv2 = nn.LazyConv2d(16, 5)
    # an affine operation: y = Wx + b
    self.fc1 = nn.LazyLinear(120)
    self.fc2 = nn.LazyLinear(84)
    self.fc3 = nn.LazyLinear(10)

  def forward(self, x):
    # Max pooling over a (2, 2) window
    x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))
    # If the size is square, you can specify with a single number
    x = F.max_pool2d(F.relu(self.conv2(x)), 2)
    # flatten all dimensions except the batch dimension
    x = torch.flatten(x, 1)
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = self.fc3(x)
    return x

# Create a model instance, pass the model to GPU
#model = LeNet().to('cuda')

#model = nnh.train_net(model, train_dataloader,test_dataloader, epochs = 45, learning_rate = 1e-3,batch_size=64)

class Residual(nn.Module):
#"""The Residual block of ResNet models."""
    def __init__(self, num_channels, use_1x1conv=False, strides=1):
        super(Residual, self).__init__()
        self.conv1 = nn.LazyConv2d(num_channels, kernel_size=3, padding=1,
        stride=strides)
        self.conv2 = nn.LazyConv2d(num_channels, kernel_size=3, padding=1)
        if use_1x1conv:
            self.conv3 = nn.LazyConv2d(num_channels, kernel_size=1,
            stride=strides)
        else:
            self.conv3 = None
        self.bn1 = nn.LazyBatchNorm2d()
        self.bn2 = nn.LazyBatchNorm2d()
    def forward(self, X):
        Y = F.relu(self.bn1(self.conv1(X)))
        Y = self.bn2(self.conv2(Y))
        if self.conv3:
            X = self.conv3(X)
            Y += X
        return F.relu(Y)

class ResNet(nn.Module):
  def __init__(self, arch, lr=0.1, num_classes=10):
    super(ResNet, self).__init__()
    # Call b1 as a method
    self.net = nn.Sequential(self.b1())
    for i, b in enumerate(arch):
      self.net.add_module(f'b{i+2}',
        self.block(*b, first_block=(i==0)))
    self.net.add_module('last', nn.Sequential(nn.AdaptiveAvgPool2d((1, 1)), nn.Flatten(),nn.LazyLinear(num_classes)))

  # Define b1 as a method within the class
  def b1(self):
    return nn.Sequential(
    nn.LazyConv2d(64, kernel_size=7, stride=2, padding=3),
    nn.LazyBatchNorm2d(), nn.ReLU(),
    nn.MaxPool2d(kernel_size=3, stride=2, padding=1))

  # Define block as a method within the class
  def block(self, num_residuals, num_channels, first_block=False):
    blk = []
    for i in range(num_residuals):
        if i == 0 and not first_block:
          blk.append(Residual(num_channels,
          use_1x1conv=True, strides=2))
        else:
          blk.append(Residual(num_channels))
        return nn.Sequential(*blk)

  def forward(self, x):
      x = self.net(x)
      return x

class ResNet18(ResNet):
  def __init__(self, lr=0.1, num_classes=10):
      super(ResNet18, self).__init__(((2, 64), (2, 128),
      (2, 256), (2, 512)),
        lr, num_classes)
# Call the parent class's __init__ method to initialize b1
# Call the to() method after initializing the instance.
if __name__ == "__main__":
  model = ResNet18()
  model = model.to('cuda')

  model = nnh.train_net(model, train_dataloader,
          test_dataloader, epochs = 75, learning_rate = 1e-3,
          batch_size=64
          )

  # Save our model for later, so we can train more or make predictions
  EPOCH = epochs
  # We use the .pt file extension by convention for saving
  # pytorch models
  PATH = "model.pt"
  # The save function creates a binary storing all our data for us
  torch.save({
  'epoch': EPOCH,
  'model_state_dict': model.state_dict(),
  'optimizer_state_dict': nnh.optimizer.state_dict(),
  }, PATH)
  #torch.save(model.state_dict(),  'resnet18_fashionmnist.pth')